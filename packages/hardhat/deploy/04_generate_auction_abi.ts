import { DeployFunction } from "hardhat-deploy/types";
import * as fs from "fs";
import * as path from "path";
import prettier from "prettier";

/**
 * @title Auction ABI Generation Script
 * @dev Post-deployment script that generates TypeScript ABI files for frontend integration
 * @notice This script extracts the Auction contract ABI and creates a typed TypeScript export
 * @notice The generated file enables type-safe contract interactions in the Next.js frontend
 */

/**
 * @dev Template comment for generated ABI files
 * @notice Warns developers not to manually edit the auto-generated file
 */
const generatedContractComment = `
/**
 * This file is autogenerated by the auction ABI generation script.
 * You should not edit it manually or your changes might be overwritten.
 */
`;

/**
 * @dev Main function to generate TypeScript ABI file from compiled Auction contract
 * @returns Promise that resolves when ABI generation is complete
 * @notice This function will:
 *   1. Read the compiled Auction contract artifact
 *   2. Extract the ABI (Application Binary Interface)
 *   3. Generate a TypeScript file with typed ABI export
 *   4. Format the output with Prettier for consistent code style
 *   5. Save the file to the Next.js contracts directory
 */
const generateAuctionAbi: DeployFunction = async function () {
  console.log("Generating Auction ABI for frontend...");

  // Define file paths for artifact reading and output generation
  const ARTIFACTS_DIR = "./artifacts/contracts";
  const TARGET_DIR = "../nextjs/contracts/";
  const AUCTION_ARTIFACT_PATH = path.join(ARTIFACTS_DIR, "Auction.sol", "Auction.json");
  const TARGET_FILE_PATH = path.join(TARGET_DIR, "auctionAbi.ts");

  try {
    // Verify that the Auction contract artifact exists
    if (!fs.existsSync(AUCTION_ARTIFACT_PATH)) {
      console.error("❌ Auction artifact not found. Compile contracts first.");
      return;
    }

    // Read and parse the compiled contract artifact
    const auctionArtifact = JSON.parse(fs.readFileSync(AUCTION_ARTIFACT_PATH, "utf8"));

    // Validate that the artifact contains an ABI
    if (!auctionArtifact.abi) {
      console.error("❌ No ABI found in auction artifact.");
      return;
    }

    // Create target directory if it doesn't exist
    if (!fs.existsSync(TARGET_DIR)) {
      fs.mkdirSync(TARGET_DIR, { recursive: true });
    }

    // Generate the TypeScript file content with typed ABI export
    const abiString = JSON.stringify(auctionArtifact.abi, null, 2);
    const fileContent = `${generatedContractComment}

export const auctionAbi = ${abiString} as const;
`;

    // Format the generated code using Prettier for consistency
    const formattedContent = await prettier.format(fileContent, {
      parser: "typescript", // TypeScript parser for proper formatting
      semi: true, // Use semicolons
      singleQuote: false, // Use double quotes
      trailingComma: "all", // Trailing commas for cleaner diffs
      printWidth: 120, // Line width limit
    });

    // Write the formatted content to the target file
    fs.writeFileSync(TARGET_FILE_PATH, formattedContent);

    console.log("✅ Auction ABI generated successfully");
  } catch (error) {
    console.error("❌ Failed to generate Auction ABI:", error);
    throw error;
  }
};

export default generateAuctionAbi;

// Deployment configuration
generateAuctionAbi.tags = ["GenerateAuctionAbi"]; // Tag for selective execution
generateAuctionAbi.dependencies = ["AuctionFactory"]; // Requires AuctionFactory deployment first
